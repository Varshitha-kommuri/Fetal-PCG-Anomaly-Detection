# -*- coding: utf-8 -*-
"""Fetal_PCG_Analysis_CODE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YOOgaOEdWhHKNtwJTMcd_DX1e0My5hil

**Importing Libraries**
"""

import pandas as pd
from datetime import datetime
import time
import numpy as np
import keras
from keras.models import Sequential
from keras.layers import LSTM,Input,Dropout,Dense,RepeatVector,TimeDistributed
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
from keras.models import Model
import seaborn as sns

"""**Data Preprocessing**"""

df = pd.read_csv("GW_36_1.csv")
df['Elapsed time'] = df['Elapsed time'].str.replace("'","",regex=True) #Removes extra apostrophes (') from the Elapsed time column
print(df)
df.to_csv("GW_36_1.csv",index=False)

df['Elapsed time'] = pd.to_datetime(df['Elapsed time'])

df.set_index('Elapsed time',inplace=True)

df_resampled = df.resample("10S").add({"PCG":"mean"})

df_resampled.reset_index(inplace=True)
print(df_resampled)

mean_pcg = df_resampled['PCG'].mean()
df_resampled['PCG'].fillna(mean_pcg,inplace=True)

has_nan = df_resampled.isna().any()
print(has_nan)
print(df_resampled)

df_resampled.to_csv('Train_Modified.csv')

file="Test.csv"
d = pd.read_csv(file)
d['Elapsed time'] = d['Elapsed time'].str.replace("'","",regex=True) #Removes extra apostrophes (') from the Elapsed time column
print(d)
d.to_csv(file,index=False)

"""**Time Series Preprocessing**"""

d['Elapsed time'] = pd.to_datetime(d['Elapsed time'])

d.set_index('Elapsed time',inplace=True)

d_resampled = d.resample("10S").add({"PCG":"mean"})

d_resampled.reset_index(inplace=True)
print(d_resampled)

mean_pcg = d_resampled['PCG'].mean()
d_resampled['PCG'].fillna(mean_pcg,inplace=True)

has_nan = d_resampled.isna().any()
print(has_nan)
print(d_resampled)

d_resampled.to_csv('Test_Modified.csv')

"""**Data visualization and scaling**"""

t = pd.read_csv('Train_Modified.csv')
dfr = t.loc[:,['Elapsed time','PCG']].copy()
print(dfr)

t1 = pd.read_csv('Test_Modified.csv')
dfrt = t1.loc[:,['Elapsed time','PCG']].copy()
print(dfrt)

sns.lineplot(x=dfr['Elapsed time'],y=dfr['PCG'])

scaler = StandardScaler()
scaler = scaler.fit(dfr[['PCG']])
dfr.loc[:'PCG'] = scaler.transform(dfr[['PCG']])

scaler = scaler.fit(dfrt[['PCG']])
dfrt.loc[:,'PCG'] = scaler.transform(dfrt[['PCG']])

"""**Sequence generation for training and testing data**"""

n=10
def sequence(x,y,n1):
  x_values = []
  y_values = []
  for i in range(len(x)-n1):
    x_values.append(x.iloc[i:(i+n1)])
    y_values.append(y.iloc[i+n1])
  return np.array(x_values),np.array(y_values)

trainX,trainY = sequence(dfr[['PCG']],dfr['PCG'],n)
testX,testY = sequence(dfrt[['PCG']],dfrt['PCG'],n)

print(trainX.shape)
print(trainY.shape)

print(testX.shape)
print(testY.shape)

"""**LSTM Sequence model**"""

model = Sequential()
model.add(LSTM(128,input_shape=(trainX.shape[1],trainX.shape[2])))
model.add(Dropout(rate=0.2))
model.add(RepeatVector(trainX.shape[1]))
model.add(LSTM(128,return_sequences=True))
model.add(Dropout(rate=0.2))
model.add(TimeDistributed(Dense(trainX.shape[2])))
model.compile(optimizer='adam',loss='mae')
model.summary()

h = model.fit(trainX,trainY,epochs=50,batch_size=32,validation_split=0.1)
plt.plot(h.history['loss'],label='Training loss')
plt.plot(h.history['val_loss'],label='Validation loss')
plt.legend()

"""**Anamoly Detection**

Keep analyzing in time windows (10-second segments).
If too many windows are anomalies, classify the whole dataset as abnormal.
"""

train_predict = model.predict(trainX)
train_MAE = np.mean(np.abs(train_predict-trainX),axis=1)

Q1 = np.percentile(train_MAE, 25)
Q3 = np.percentile(train_MAE, 75)
IQR = Q3 - Q1
anomaly_threshold = Q3 + 1.5 * IQR  # Anything above this is an anomaly

test_predict = model.predict(testX)
test_MAE = np.mean(np.abs(test_predict-testX),axis=1)
print(test_MAE.shape)
plt.hist(test_MAE,bins=10)


c=0
for i in range(len(test_MAE)):
  if(test_MAE[i] > anomaly_threshold):
    c+=1
print(c)

threshold_percentage = 0.1  # 10% of sequences must be anomalies
threshold_count = int(len(test_MAE) * threshold_percentage)

if c >= threshold_count:
    print("Anomaly")
else:
    print("Normal")